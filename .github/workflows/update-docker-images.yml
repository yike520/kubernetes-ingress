name: Update Docker Images

on:
  schedule:
    - cron:  '0 1 * * *'
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  DOCKER_BUILDKIT: 1
  K8S_TIMEOUT: 75s

concurrency:
  group: ${{ github.ref_name }}-update
  cancel-in-progress: true

jobs:

  variables:
    name: Get versions of base images
    runs-on: ubuntu-20.04
    outputs:
      kic-tag: ${{ steps.kic.outputs.tag }}
      versions: ${{ steps.versions.outputs.matrix }}
      sha_short: ${{ steps.vars.outputs.sha_short }}
      sha_long: ${{ steps.vars.outputs.sha_long }}
      k8s_version: ${{ steps.vars.outputs.k8s_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set KIC version
        id: kic
        run: |
          tag=$(git tag --sort=-version:refname | head -n1)
          echo "::set-output name=tag::${tag//v}"
      - name: Checkout Repository at ${{ steps.kic.outputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: refs/tags/v${{ steps.kic.outputs.tag }}
      - name: Set NGINX versions
        id: versions
        run: |
          nginx=library/$(grep -m1 "FROM nginx:" < build/Dockerfile | awk -F" " '{print $2}')
          nginx_alpine=library/nginx:$(grep -m1 "FROM.*nginx:.*alpine" < build/Dockerfile | awk -F"[ :]" '{print $3}')
          nginx_ubi=$(grep "FROM redhat" < build/Dockerfile | awk -F" " '{print $2}')
          echo "::set-output name=matrix::[{\"version\": \"${nginx}\", \"distro\": \"debian\"}, {\"version\": \"${nginx_alpine}\", \"distro\": \"alpine\"}, {\"version\": \"${nginx_ubi}\", \"distro\": \"ubi\"}]"
      - name: Set other variables
        id: vars
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=sha_long::$(git rev-parse HEAD)"
          echo "::set-output name=k8s_version::$(grep -m1 'FROM kindest/node' <tests/docker/Dockerfile | awk -F'[:v]' '{print $3}')"

  check:
    name: Check if updates are needed
    runs-on: ubuntu-20.04
    needs: variables
    outputs:
      needs-updating-debian: ${{ steps.needs.outputs.debian }}
      needs-updating-alpine: ${{ steps.needs.outputs.alpine }}
      needs-updating-ubi: ${{ steps.needs.outputs.ubi }}
    strategy:
      matrix:
        base_image: ${{ fromJson(needs.variables.outputs.versions) }}
    steps:
      - name: Build KIC tag
        id: dist
        run: |
          if [ ${{ matrix.base_image.distro }} == "debian" ]; then dist=""; else dist="-${{ matrix.base_image.distro }}"; fi
          echo "::set-output name=tag::${{ needs.variables.outputs.kic-tag }}${dist}"
      - name: Check if update available for ${{ matrix.base_image.version }}
        id: update
        uses: lucacome/docker-image-update-checker@v1
        with:
          base-image: ${{ matrix.base_image.version}}
          image: nginx/nginx-ingress:${{ steps.dist.outputs.tag }}
      - id: needs
        run: echo "::set-output name=${{ matrix.base_image.distro }}::${{ steps.update.outputs.needs-updating }}"


  binary:
    if: ${{ needs.check.outputs.needs-updating-debian == 'true' || needs.check.outputs.needs-updating-alpine == 'true' || needs.check.outputs.needs-updating-ubi == 'true' }}
    name: Build binaries
    runs-on: ubuntu-20.04
    needs: [check, variables]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: refs/tags/v${{ needs.variables.outputs.kic-tag }}
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - name: Determine GOPATH
        id: go
        run: echo "::set-output name=go_path::$(go env GOPATH)"
      - name: Build binaries
        uses: goreleaser/goreleaser-action@v3
        with:
          version: latest
          args: build --rm-dist --id kubernetes-ingress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ steps.go.outputs.go_path }}
      - name: Store Artifacts in Cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}

  release-docker:
    name: Release Images
    runs-on: ubuntu-20.04
    needs: [binary, check, variables]
    strategy:
      matrix:
        include:
          - image: debian
            marker: ingresses
            platforms: linux/arm,linux/arm64,linux/amd64,linux/ppc64le,linux/s390x
            needs-updating: ${{ needs.check.outputs.needs-updating-debian }}
          - image: alpine
            marker: "vs" # add vsr after 2.3.1/2.4 release
            platforms: linux/arm,linux/arm64,linux/amd64,linux/ppc64le,linux/s390x
            needs-updating: ${{ needs.check.outputs.needs-updating-alpine }}
          - image: ubi
            marker: "policies" # add ts after 2.3.1/2.4 release
            platforms: linux/arm64,linux/amd64,linux/s390x
            needs-updating: ${{ needs.check.outputs.needs-updating-ubi }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: refs/tags/v${{ needs.variables.outputs.kic-tag }}
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Fetch Cached Artifacts
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Run Smoke Tests
        id: smoke-tests
        uses: ./.github/actions/smoke-tests
        with:
          image: ${{ matrix.image }}
          marker: ${{ matrix.marker }}
          k8s-version: ${{ needs.variables.outputs.k8s_version }}
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.smoke-tests.outputs.test-results-name }}
          path: ${{ github.workspace }}/tests/${{ steps.smoke-tests.outputs.test-results-name }}.html
        if: always()
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm,arm64,ppc64le,s390x
        if: ${{ matrix.needs-updating == 'true' }}
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Login to Public ECR
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Get short tag
        id: tag
        run: |
          version=${{ needs.variables.outputs.kic-tag }}
          short="${version%.*}"
          echo "::set-output name=short::$short"
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            name=nginx/nginx-ingress
            name=ghcr.io/nginxinc/kubernetes-ingress
            name=public.ecr.aws/nginx/nginx-ingress
          flavor: |
            latest=true
            suffix=${{ contains(matrix.image, 'ubi') && '-ubi' || '' }}${{ contains(matrix.image, 'alpine') && '-alpine' || '' }},onlatest=true
          tags: |
            type=raw,value=${{ needs.variables.outputs.kic-tag }}
            type=raw,value=${{ steps.tag.outputs.short }}
          labels: |
            org.opencontainers.image.description=NGINX Ingress Controller for Kubernetes
            org.opencontainers.image.documentation=https://docs.nginx.com/nginx-ingress-controller
            org.opencontainers.image.vendor=NGINX Inc <kubernetes@nginx.com>
            org.opencontainers.image.revision=${{ needs.variables.outputs.sha_long }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/nginxinc/kubernetes-ingress/main/README.md
            io.artifacthub.package.logo-url=https://docs.nginx.com/nginx-ingress-controller/images/icons/NGINX-Ingress-Controller-product-icon.svg
            io.artifacthub.package.maintainers=[{"name":"NGINX Inc","email":"kubernetes@nginx.com"}]
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.keywords=kubernetes,ingress,nginx,controller
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Push to Dockerhub
        id: push
        uses: docker/build-push-action@v3
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=gha,scope=${{ matrix.image }}
          cache-to: type=gha,scope=${{ matrix.image }},mode=max
          target: goreleaser
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platforms }}
          push: true
          no-cache: true
          pull: true
          build-args: |
            BUILD_OS=${{ matrix.image }}
            IC_VERSION=v${{ needs.variables.outputs.kic-tag }}
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.8.0
        continue-on-error: true
        with:
          image-ref: nginx/nginx-ingress:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          ignore-unfixed: 'true'
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        continue-on-error: true
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'
        if: ${{ matrix.needs-updating == 'true' }}
      - name: Upload Scan Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: 'trivy-results-${{ matrix.image }}.sarif'
          path: 'trivy-results-${{ matrix.image }}.sarif'
        if: always()
      - name: Get variables for Slack
        id: slack
        run: |
          echo "::set-output name=message::$(git log -1 --pretty=%B)"
          echo "::set-output name=date::$(date +%s)"
      - name: Send Notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              username: "Docker",
              icon_emoji: ":docker:",
              mention: "here",
              attachments: [{
                title: `New Docker image was pushed to DockerHub for ${process.env.AS_REPO}`,
                color: "good",
                fields: [{
                  title: "Docker Image",
                  value: `<https://hub.docker.com/r/nginx/nginx-ingress/tags?page=1&ordering=last_updated&name=${{ needs.variables.outputs.kic-tag }}|nginx/nginx-ingress:${{ steps.meta.outputs.version }}>`,
                  short: true
                },
                {
                  title: "Image digest",
                  value: "${{ steps.push.outputs.digest }}",
                  short: true
                },
                {
                  title: "Commit Message",
                  value: `${{ steps.slack.outputs.message }}`,
                  short: true
                },
                {
                  title: "Commit Hash",
                  value: `<https://github.com/${{ github.repository }}/commit/${{ needs.variables.outputs.sha_long }}|${{ needs.variables.outputs.sha_short }}>`,
                  short: true
                }],
                footer: "Update DockerHub Image",
                footer_icon: "https://raw.githubusercontent.com/docker-library/docs/c350af05d3fac7b5c3f6327ac82fe4d990d8729c/docker/logo.png",
                ts: ${{ steps.slack.outputs.date }}
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: ${{ matrix.needs-updating == 'true' }}
